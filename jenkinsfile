pipeline{
    agent any
    parameters {
        booleanParam(name: "PUBLISH", defaultValue: false)
    }
    environment {
        version = sh(script: 'date +%y.%j.%H%M', returnStdout: true)
    }

    stages{
        stage('checkout') {
            steps {
                cleanWs()
                checkout scm
            }
        }
        stage("build"){
            steps{
                sh 'dotnet publish --configuration Release /p:Version=1.0.0.0 /p:FileVersion=1.${version}'
            }
        }
        stage("test"){
            steps{
                sh 'dotnet test --no-build --configuration Release --settings coverlet.runsettings'
                cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: '**/Fun.Api.Tests/TestResults/*/coverage.cobertura.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
            }
        }
        stage("publish"){
            when { 
                expression { params.PUBLISH } 
            }
            steps{
                withCredentials([usernamePassword(credentialsId: 'DockerHub', usernameVariable: 'user', passwordVariable: 'password')]) {
                    sh 'docker build --file ./Fun.Api/funapi.dockerfile -t timvh/funapi:latest -t timvh/funapi:v1.${version} ./Fun.Api'
                    sh "docker login -u $user -p $password"                    
                    sh "docker push timvh/funapi"
                    sh "docker logout"
                    sh 'git tag funapi-v1.${version}'
                    sh 'git push origin funapi-v1.${version}'
                }                
            }
        }
    }    
}