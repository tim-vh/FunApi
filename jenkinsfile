pipeline{
    agent any
    parameters {
        booleanParam(name: 'PUBLISH', defaultValue: false)
    }
    environment {
        VERSION = sh(script: 'date +%y.%j.%H%M', returnStdout: true)
    }

    stages{
        stage('checkout') {
            steps {
                cleanWs()
                checkout scm
            }
        }
        stage('build'){
            steps{
                sh 'dotnet publish --configuration Release /p:Version=1.0.0.0 /p:FileVersion=1.${VERSION}'
            }
        }
        stage('test'){
            steps{
                sh 'dotnet test --no-build --configuration Release --settings coverlet.runsettings'
                cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: '**/Fun.Api.Tests/TestResults/*/coverage.cobertura.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
            }
        }
        stage('publish'){
            when { 
                expression { params.PUBLISH } 
            }
            steps{
                 sh 'docker build --file ./Fun.Api/funapi.dockerfile -t timvh/funapi:latest -t timvh/funapi:v1.${VERSION} ./Fun.Api'
                withCredentials([usernamePassword(credentialsId: 'DockerHub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {                   
                    sh 'docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}'
                    sh 'docker push timvh/funapi:v1.${VERSION}'
                    sh 'docker push timvh/funapi:latest'
                    sh 'docker logout'
                }
                
                withCredentials([sshUserPrivateKey(credentialsId: "GitHub", keyFileVariable: 'key')]) {
                    sh 'git tag funapi-v1.${VERSION}'
                    sh 'GIT_SSH_COMMAND = "ssh -i $key"'
                    sh('git push --tags')                
                }
            }
        }
    }    
}